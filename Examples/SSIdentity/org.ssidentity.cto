namespace org.ssidentity
//It is going to be a model based on Bulgaria 

enum Gender {
  o Male
  o Female
  o Others
}

participant Person identified by personID {
  o String personID
  o String firstName
  o String lastName
  o String phone
  o String email
  o Gender gender
  o Integer age range = [0, 120]
}

participant Customs identified by customsID{
  o String customsID
  o String firstName
  o String lastName
}

participant HighSchool identified by highSchoolID {
  o String highSchoolID
  o String highschoolName
  o String email
  o String phone
  o Integer rating
}

//DS wants only approvement that the person has diploma and that the person is above 18 years old 
participant DrivingSchool identified by drivingSchoolID {
  o String drivingSchoolID
  o String drivingSchoolName
  o Integer rating
}

//It will want the grades for math, english and Computer science equivalent to the A levels  
participant University identified by universityID {
  o String universityID
  o String universityName
  o String email
  o String phone
  o Integer rating
}

//contains the grades for Math, English and Computer Science, equivalent to A levels
asset Diploma identified by diplomaID {
  o String diplomaID
  o Double mathGrade  range = [2.0, 6.0]
  o Double englishGrade range = [2.0,6.0]
  o Double csGrade range = [2.0,6.0]
  o DiplomaStatus diplomaStatus
  --> HighSchool hs 
  --> Person owner
}

asset DrivingLicence identified by drivingLicenceID {
  o String drivingLicenceID
  o drivingLicenceStatus dsStatus
  --> Person owner
  --> DrivingSchool ds
  o DiplomaStatus diplomaStatus
}

asset UniversityDiploma identified by uniDiplomaID {
  o String uniDiplomaID
  o Integer finalGrade range = [0, 100] optional
  o enrollStatus uniStatus
  --> Person owner
  --> University uni
}

enum enrollStatus {
  o Enrolled
  o Graduated
  o Left
  o Pending
  o Declined
}

enum DiplomaStatus{
  o Pending
  o Confirmed
  o Declined
}

enum drivingLicenceStatus {
  o Pending
  o Confirmed
  o Declined
}

transaction createDiploma {
  o String diplomaID
  o Double mathGrade
  o Double englishGrade
  o Double csGrade
  --> HighSchool hs
  --> Person owner
}

transaction createDrivingLicence {
  o String drivingLicenceID
  --> Person owner
  --> Diploma diploma
  --> DrivingSchool ds
}

transaction enrollInUniversity {
  o String uniDiplomaID
  o Double mathGrade
  o Double englishGrade
  o Double csGrade
  --> Person owner
  --> Diploma diploma
  --> University uni
}

transaction confirmDiploma{
 --> Person owner 
 --> Diploma diploma
 --> HighSchool hs 
}

transaction confirmDrivingLicence {
  --> Person owner
  --> DrivingSchool ds
  --> DrivingLicence dl
}

transaction graduateUni{
  o Integer finalGrade
 --> Person owner 
 --> UniversityDiploma uniDiploma
 --> University uni 
}

transaction applyToUniversity{
 --> Person owner 
 --> Diploma diploma
 --> University uni 
}

event applyToUniversityEvent{
 --> Person owner 
 o String diploma
 --> University uni
}

event waitingDiplomaConfirmation{
 --> Person owner 
 o String diploma
 --> HighSchool hs 
}

event waitingDrivingLicenceConfirmation {
  --> Person owner
  --> DrivingSchool ds
  o String drivingLicence
}